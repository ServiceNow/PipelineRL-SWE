import logging
from typing import Annotated, Any, Generator, Literal, TypeAlias, Union
from typing import Dict

from pydantic import Field

from tapeagents.agent import Agent
from tapeagents.core import (
    LLMOutputParsingFailureAction,
    Observation,
    Prompt,
    Step,
    Tape,
    Action,
    FinalStep,
)
from tapeagents.llms import LLM
from tapeagents.nodes import StandardNode

logger = logging.getLogger(__name__)


class LocalizationTask(Observation):
    """Task step containing the problem statement for file localization."""
    kind: Literal["localization_task"] = "localization_task"
    problem_statement: str = Field(description="The issue description to localize relevant files for")
    file_stats: Dict[str, Dict] = Field(default_factory=dict) # file stats
    
    def llm_view(self, indent: int | None = 2) -> str:
        return f"Issue to localize: {self.problem_statement}"


class LocalizationQuery(Action):
    """Action containing a search query generated by the model for BM25 search."""
    kind: Literal["localization_query"] = "localization_query"
    query: str = Field(description="Search query to find relevant files using BM25")


LocalizationStep: TypeAlias = Annotated[
    LocalizationQuery,
    Field(discriminator="kind"),
]

LocalizationTape = Tape[
    None,
    Union[
        LocalizationTask,
        LocalizationQuery,
        LLMOutputParsingFailureAction,
    ],
]


class LocalizationNode(StandardNode):
    """Node that generates search queries for file localization."""
    
    max_prompt_length: int = 8000  # Reasonable length for problem statements
    
    def parse_completion(self, completion: str) -> Generator[Step, None, None]:
        """Parse the LLM completion to extract the search query."""
        try:
            # The completion should just be the search query
            # We'll be lenient and take the content as-is, letting RL figure out what works
            query = completion.strip()
            
            if not query:
                yield LLMOutputParsingFailureAction(
                    error="Empty search query generated", 
                    llm_output=completion
                )
                return
                
            yield LocalizationQuery(query=query)
            
        except Exception as e:
            logger.info(f"Failed to parse localization query: {completion}\n\nError: {e}")
            yield LLMOutputParsingFailureAction(
                error=f"Failed to parse localization query: {e}", 
                llm_output=completion
            )

    def make_prompt(self, agent: Any, tape: Tape) -> Prompt:
        """Create a prompt for the model to generate a search query."""
        # The tape should contain just the localization task
        task = tape.steps[0]
        assert isinstance(task, LocalizationTask), f"Expected LocalizationTask, got {task.__class__.__name__}"
        file_list = list(task.file_stats.keys())
        files_text = "\n".join(file_list)
        
        system_message = {
            "role": "system",
            "content": (
                "You are an expert software engineer tasked with finding relevant files in a codebase "
                "to fix a given issue. Your job is to generate a search query that will help locate "
                "the most relevant files using keyword search.\n\n"
                "Generate a search query containing keywords, function names, class names, or other "
                "terms that would help find files related to the issue. Focus on technical terms "
                "that are likely to appear in the relevant source code.\n\n"
                "Output only the search query, nothing else."
            )
        }
        
        user_message = {
            "role": "user", 
            "content": (
                f"Repository source files:\n{files_text}\n\n"
                f"Generate a search query to find files relevant to this issue:\n\n"
                f"{task.problem_statement}\n\n"
                f"Search query:"
            )
        }
        
        messages = [system_message, user_message]
        
        # Apply token limit if we have a tokenizer
        prompt_token_ids = None
        if hasattr(agent, 'llm') and hasattr(agent.llm, 'tokenizer') and agent.llm.tokenizer:
            prompt_token_ids = agent.llm.tokenizer.apply_chat_template(
                messages, add_special_tokens=True, add_generation_prompt=True
            )
            prompt_token_ids = prompt_token_ids[-self.max_prompt_length:]
            
        return Prompt(messages=messages, token_ids=prompt_token_ids)


class LocalizationAgent(Agent):
    """Simple one-step agent for generating file localization queries."""
    
    @classmethod
    def create(cls, system_prompt: str = None, llm: LLM = None, max_prompt_length: int = 8000):
        """Create a LocalizationAgent.
        
        Args:
            system_prompt: Optional system prompt override
            llm: The LLM to use
            max_prompt_length: Maximum prompt length in tokens
        """
        # Handle the llm parameter correctly for the Agent base class
        llms = llm
        if llm is not None and not isinstance(llm, dict):
            llms = {"default": llm}
            
        agent = super().create(
            llms=llms,
            nodes=[
                LocalizationNode(
                    name="localization",
                    agent_step_cls=LocalizationStep,
                    system_prompt=system_prompt if system_prompt else "",
                    max_prompt_length=max_prompt_length,
                ),
            ],
            max_iterations=1,  # Single step agent
        )
        agent.store_llm_calls = True
        if llm:
            agent.llm.load_tokenizer()
        return agent